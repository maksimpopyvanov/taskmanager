{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA,6CAA6C,wBAAwB;AACrE;AACA,gDAAgD,iBAAiB;AACjE,+CAA+C,IAAI,GAAG,IAAI;AAC1D;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA,oCAAoC,2BAA2B;AAC/D;AACA,uDAAuD,EAAE,GAAG,IAAI;AAChE,oDAAoD,EAAE,GAAG,IAAI;AAC7D;AACA,oDAAoD,EAAE,IAAI,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,6BAA6B;AACvE;AACA;AACA;AACA,qCAAqC,eAAe,GAAG,kBAAkB;AACzE;AACA,2CAA2C,wBAAwB;AACnE,0CAA0C,6BAA6B,GAAG,6BAA6B;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,OAAO,IAAI,IAAI;AACrF;AACA;AACA,8DAA8D,iBAAiB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,cAAc,GAAG,SAAS;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA,sEAAsE,EAAE;AACxE;AACA,qCAAqC,eAAe,GAAG,kBAAkB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClOe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc,EAAE,IAAI;AACvD;AACA;AACA,8CAA8C,IAAI,aAAa,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UC1BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN2B;AACO;AAClC;AACA,kBAAkB,6CAAK,KAAK,iDAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://elma-task/./src/js/core.js","webpack://elma-task/./src/js/services.js","webpack://elma-task/webpack/bootstrap","webpack://elma-task/webpack/runtime/define property getters","webpack://elma-task/webpack/runtime/hasOwnProperty shorthand","webpack://elma-task/webpack/runtime/make namespace object","webpack://elma-task/./src/js/index.js"],"sourcesContent":["export default class Table {\r\n    \r\n    users = [];\r\n    usersId = [];\r\n    dates = [];\r\n    tasks = [];\r\n    actualDate = new Date();\r\n    firstDateIndex = -3;\r\n    idleTaskIndex = null;\r\n\r\n    constructor(services) {\r\n        this.services = services;\r\n    }\r\n\r\n    createTable = () => {\r\n        this.services.getUsers()\r\n            .then(users => {\r\n                users.forEach(user => {\r\n                    this.users.push(user);\r\n                    this.usersId.push(user.id)\r\n                });\r\n                const table = document.querySelector('.wrapper__table');\r\n\r\n                for (let i = 0; i < this.users.length; i++) { \r\n                    let userDiv = document.createElement('div');\r\n                    userDiv.textContent = `${this.users[i].firstName}`;\r\n                    userDiv.classList.add('user');\r\n                    userDiv.dataset.userId = `${this.users[i].id}`\r\n                    userDiv.style.gridRow = `${i+2}/${i+3}`;\r\n                    table.append(userDiv);\r\n                }\r\n\r\n                for (let i = 2; i < 9; i++) {\r\n\r\n                    for (let k = 2; k < this.users.length + 2; k++) {\r\n                        let taskCell = document.createElement('div');\r\n                        taskCell.style.gridColumn = `${i}/${i+1}`;\r\n                        taskCell.style.gridRow = `${k}/${k+1}`;\r\n                        taskCell.classList.add('task-cell');\r\n                        taskCell.dataset.cell = `c${i}_r${k}`;\r\n                        table.append(taskCell);\r\n                    }\r\n\r\n                }\r\n                \r\n                this.setData();\r\n            });\r\n    }\r\n\r\n    setData = () => {\r\n\r\n        const table = document.querySelector('.wrapper__table');\r\n\r\n        for (let i = this.firstDateIndex; i < this.firstDateIndex + 7; i++) {\r\n            let date = new Date(this.actualDate);\r\n            let dateDiv = document.createElement('div');\r\n            date.setDate(date.getDate() + i);\r\n            dateDiv.textContent = `${date.getDate()}.${date.getMonth()+1}`;\r\n            dateDiv.classList.add('date');\r\n            dateDiv.dataset.dateIndex = `${i - this.firstDateIndex}`;\r\n            dateDiv.style.gridColumn = `${i - this.firstDateIndex  + 2}/${i - this.firstDateIndex  + 3}`;\r\n            table.append(dateDiv);\r\n            date = date.toISOString();\r\n            date = date.slice(0, date.indexOf('T'));\r\n            this.dates[i-this.firstDateIndex] = date;\r\n        }\r\n\r\n        this.services.getTasks()\r\n            .then(tasks => {\r\n                tasks.forEach(task => this.tasks.push(task));\r\n                this.updateTaskDivs();\r\n                this.updateUnaddressedTasks();\r\n            });\r\n        \r\n    }\r\n\r\n    updateTaskDivs = () => {\r\n        const taskDivs = document.querySelectorAll('.task');\r\n        taskDivs.forEach(task => task.remove());\r\n        this.tasks.forEach(task => {\r\n            let startDate = new Date(task.planStartDate);\r\n            let endDate = new Date(task.planEndDate);\r\n            startDate = startDate.toISOString();\r\n            startDate = startDate.slice(0, startDate.indexOf('T'));\r\n\r\n            if (this.usersId.indexOf(task.executor) >= 0 && this.dates.indexOf(startDate) >= 0) {\r\n                let row = this.usersId.indexOf(task.executor) + 2;\r\n                let column = this.dates.indexOf(startDate) + 2;\r\n                let taslCell = document.querySelector(`[data-cell=\"c${column}_r${row}\"]`);\r\n                let taskDiv = document.createElement('div');\r\n                taskDiv.classList.add('task');\r\n                taskDiv.dataset.planEnd = `План завершения: ${task.planEndDate}`;\r\n                let timeLeft = Math.floor((endDate - this.actualDate) / 1000 / 60 / 60);\r\n\r\n                if (timeLeft < 0) {\r\n                    timeLeft = 0;\r\n                }\r\n                \r\n                taskDiv.textContent = `${task.subject} (${timeLeft}ч)`;\r\n                taslCell.append(taskDiv);\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    updateUnaddressedTasks = () => {\r\n        const backlog = document.querySelector('.backlog');\r\n        const backlogTasks = document.querySelectorAll('.backlog__task');\r\n\r\n        backlogTasks.forEach(task => {\r\n            task.remove();\r\n        });\r\n\r\n        this.tasks.forEach(task => {\r\n            if (task.executor == null) {\r\n                \r\n                let taskDiv = document.createElement('div');\r\n                taskDiv.textContent = `${task.subject}`;\r\n                taskDiv.classList.add('backlog__task');\r\n                taskDiv.dataset.taskId = `${task.id}`;\r\n                taskDiv.setAttribute(\"draggable\", true);\r\n                backlog.append(taskDiv);\r\n                taskDiv.addEventListener('dragstart', (e) => {\r\n                    this.idleTaskIndex = e.target.dataset.taskId;\r\n                    setTimeout(() => {\r\n                        e.target.classList.add('hide');\r\n                    }, 0);\r\n                });\r\n                taskDiv.addEventListener('dragend', (e) => {\r\n                    e.target.classList.remove('hide');\r\n                    this.idleTaskIndex = null;\r\n                    \r\n                })\r\n            }\r\n        });\r\n\r\n        const users = document.querySelectorAll('.user');\r\n        users.forEach(user => {\r\n            user.addEventListener('dragover', (e) => {\r\n                e.preventDefault();\r\n            });\r\n            user.addEventListener('dragenter', (e) => {\r\n                e.target.classList.add('hovered');\r\n            })\r\n            user.addEventListener('dragleave', (e) => {\r\n                e.target.classList.remove('hovered');\r\n            })\r\n            user.addEventListener('drop', (e) => {\r\n                const id = +user.dataset.userId;\r\n                this.tasks.forEach(task => {\r\n\r\n                   if (task.id == this.idleTaskIndex) {\r\n                        task.executor = id;\r\n                        this.updateTaskDivs();\r\n                    }\r\n                });\r\n                const backlogTasks = document.querySelectorAll('.backlog__task');\r\n                backlogTasks.forEach(task => {\r\n                    if (task.dataset.taskId == `${this.idleTaskIndex}`) {\r\n                        task.remove();\r\n                    }\r\n                });\r\n                e.target.classList.remove('hovered');\r\n            })\r\n        });\r\n        const taskCell = document.querySelectorAll('.task-cell');\r\n        taskCell.forEach(cell => {\r\n            cell.addEventListener('dragover', (e) => {\r\n                e.preventDefault();\r\n            });\r\n            cell.addEventListener('dragenter', (e) => {\r\n                e.currentTarget.classList.add('hovered');\r\n            })\r\n            cell.addEventListener('dragleave', (e) => {\r\n                e.currentTarget.classList.remove('hovered');\r\n            })\r\n            cell.addEventListener('drop', (e) => {\r\n                let reg = /r/;\r\n                const cellNumber = e.currentTarget.dataset.cell;\r\n                const indexOfUsersId = +cellNumber.slice(cellNumber.search(reg) + 1) - 2;\r\n                reg = /_/;\r\n                const indexOfDatesArr = +cellNumber.slice(1, cellNumber.search(reg)) - 2;\r\n                this.usersId.forEach((id, i) => {\r\n                    if(i == indexOfUsersId) {\r\n                        this.tasks.forEach(task => {\r\n                            if (task.id == this.idleTaskIndex) {\r\n                                task.executor = id;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                this.dates.forEach((date, i) => {\r\n                    if (i == indexOfDatesArr) {\r\n                        this.tasks.forEach(task => {\r\n                            if (task.id == this.idleTaskIndex) {\r\n                            task.planStartDate = date;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                this.updateTaskDivs();\r\n                const backlogTasks = document.querySelectorAll('.backlog__task');\r\n                backlogTasks.forEach(task => {\r\n                    if (task.dataset.taskId == `${this.idleTaskIndex}`) {\r\n                        task.remove();\r\n                    }\r\n                });\r\n                e.currentTarget.classList.remove('hovered');\r\n            })\r\n        });\r\n    }\r\n    \r\n    updateDate = () => {\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            let date = new Date(this.actualDate);\r\n            let dateDiv = document.querySelector(`[data-date-index=\"${i}\"]`);\r\n            date.setDate(this.actualDate.getDate() + this.firstDateIndex + i);\r\n            dateDiv.textContent = `${date.getDate()}.${date.getMonth()+1}`;\r\n            date = date.toISOString();\r\n            date = date.slice(0, date.indexOf('T'));\r\n            this.dates[i] = date;\r\n            this.updateTaskDivs();\r\n        }\r\n    }\r\n}","export default class Services {\r\n\r\n    constructor() {\r\n        this._apibase = 'http://localhost:3000';\r\n    }\r\n\r\n    getResource = async (url) => {\r\n        const res = await fetch(`${this._apibase}${url}`);\r\n        \r\n        if(!res.ok) {\r\n            throw new Error(`Coul not fetch ${url}, received ${res.status}`);\r\n        }\r\n    \r\n        return await res.json();\r\n    }\r\n    \r\n    getUsers = async () => {\r\n        const users = await this.getResource(`/users`);\r\n        return users\r\n    }\r\n    \r\n    getTasks = async () => {\r\n        const tasks = await this.getResource('/tasks');\r\n        return tasks\r\n    }\r\n    \r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Table from './core';\r\nimport Services from './services';\r\n\r\nconst table = new Table(new Services);\r\ntable.createTable();\r\nconst left = document.querySelector('.left');\r\nconst right = document.querySelector('.right');\r\n\r\nleft.addEventListener('click', () => {\r\n    table.firstDateIndex -= 7;\r\n    table.updateDate();\r\n});\r\n\r\nright.addEventListener('click', () => {\r\n    table.firstDateIndex += 7;\r\n    table.updateDate();\r\n});"],"names":[],"sourceRoot":""}